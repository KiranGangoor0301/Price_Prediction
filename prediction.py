# -*- coding: utf-8 -*-
"""prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KXAEv4Nd_mCL1iNS5XSmhJpMFIiSiUo4
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/Housing.csv')

df

df.head()

df.isnull().sum()

df.describe()

y_data=df.iloc[:,0]
y_data

X_half2=df.iloc[:,5:10]
X_half2
X_ex2 = df.iloc[:,11:]
X_half2 = pd.concat([X_half2, X_ex2], axis=1)
X_half2.head()
X_half3=X_half2.drop(['furnishingstatus'],axis=1)

X_data = df.iloc[:, 1:5]
X_ex = df[['parking']]
X_half = pd.concat([X_data, X_ex], axis=1)
X_half.head()
X_norm=X_data[['area']]
X_norm

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import MinMaxScaler, OrdinalEncoder, LabelEncoder,Normalizer,StandardScaler
import pandas as pd

scaler=StandardScaler()
X_norm=pd.DataFrame(scaler.fit_transform(X_norm))
X_norm.head()
X_half = pd.concat([X_data, X_norm], axis=1)
X_half.drop(['area'],axis=1,inplace=True)
X_half.rename(columns={0:'area'},inplace=True)
# X_half.drop(X_half['area'],inplace=True,axis=1)
X_half

sns.scatterplot(X_half)

ordinal=OrdinalEncoder(categories=[['unfurnished','semi-furnished','furnished']])
ordinal.fit(X_half2[['furnishingstatus']])
X_ord=ordinal.transform(X_half2[['furnishingstatus']])
X_ord
le = LabelEncoder()
categorical_columns = ['mainroad', 'guestroom', 'basement', 'hotwaterheating', 'airconditioning', 'prefarea']

for col in categorical_columns:
    X_half3[col] = le.fit_transform(X_half3[col])
X_half3

X_half_df = pd.DataFrame(X_half)
X_ord_df = pd.DataFrame(X_ord)
X_half3_df = pd.DataFrame(X_half3)

# Concatenate the DataFrames horizontally along columns
X_data = pd.concat([X_half_df, X_ord_df, X_half3_df], axis=1)
# X_data.drop(X_data['0'],axis=1,inplace=True)
X_data

# X_data_upd = X_data.drop(['mainroad', 'hotwaterheating', 'guestroom'], axis=1)
sns.scatterplot(X_data)

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X_data,y_data,test_size=0.3)

print(X_test.shape)
print(X_train.shape)
print(y_train.shape)
print(y_test.shape)

X_train.columns = X_train.columns.astype(str)
X_test.columns = X_test.columns.astype(str)

from sklearn.linear_model import LinearRegression
from sklearn.naive_bayes import GaussianNB

lr=LinearRegression()

lr.fit(X_train,y_train)

from sklearn.metrics import accuracy_score,r2_score

prediction=lr.predict(X_test)

y_test[0]

prediction[0]

# accuracy_score(y_test,prediction)
r2 = r2_score(y_test, prediction)
r2

from sklearn.metrics import mean_squared_error

mse=mean_squared_error(y_test,prediction)

np.sqrt(mse)